#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test some invalid combinations of --gpu options
############################################################################
# Copyright (C) 2018 SchedMD LLC
# Written by Morris Jette
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set job_id      0
set job_id_list [list]

set nb_nodes [get_partition_param [default_partition] "TotalNodes"]

set gpu_cnt [get_highest_gres_count 1 "gpu"]

if {![check_config_select "cons_tres"]} {
	skip "The test is only compatible with cons_tres"
}

if {$gpu_cnt < 1} {
	skip "This test requires 1 or more GPUs on 1 node of the default partition"
}
log_debug "GPU count is $gpu_cnt"

proc cleanup {} {
	global job_id_list

	cancel_job $job_id_list
}

if {![regexp {(\d+).(\d+).(\S+)} [get_config_param SLURM_VERSION] - major minor release]} {
	fail "Unable to get SLURM_VERSION"
}

#
# Request more GPUs per node than exist on a single node
#
log_info "==== TEST 1 ===="
set output [run_command_output -xfail -subtest "$sbatch --gpus-per-node=[expr $gpu_cnt + 1] -N1 --output=/dev/null -t1 --wrap $bin_hostname"]
subtest {[regexp "sbatch: error: Batch job submission failed: Requested node configuration is not available" $output]} "Job should be rejected at submit time"
if {[regexp "Submitted batch job ($number)" $output - job_id]} {
	lappend job_id_list $job_id
}

#
# Specify 1 node and more GPUs than exist on a single node
#
log_info "==== TEST 2 ===="
set output [run_command_output -xfail -subtest "$sbatch --gpus-per-node=$gpu_cnt --gres=gpu:[expr $gpu_cnt + 1] -N1 --output=/dev/null -t1 --wrap $bin_hostname"]
subtest {[regexp "sbatch: error: Batch job submission failed: Requested node configuration is not available" $output]} "Job should be rejected at submit time"

if {[regexp "Submitted batch job ($number)" $output - job_id]} {
	lappend job_id_list $job_id
}

#
# Specify inconsistent --cpus-per-task and --gpus-per-task/--cpus-per-gpu
#
log_info "==== TEST 3 ===="
set output [run_command_output -xfail -subtest "$sbatch --gpus-per-task=1 --cpus-per-gpu=1 --cpus-per-task=2 -N1 --output=/dev/null -t1 --wrap $bin_hostname"]
if {$major < 21} {
	subtest {[regexp "sbatch: error: Batch job submission failed: Invalid generic resource \\(gres\\) specification" $output]} "Job should be rejected at submit time"
} else {
	subtest {[regexp "sbatch: error: Failed to validate job spec. --gpus-per-task used without either --gpus or -n/--ntasks is not allowed." $output]} "Job should be rejected at submit time"
}
if {[regexp "Submitted batch job ($number)" $output - job_id]} {
	lappend job_id_list $job_id
}

#
# Specify inconsistent tasks per node
#
log_info "==== TEST 4 ===="
set output [run_command_output -xfail -subtest "$sbatch --gpus-per-task=1 --gpus-per-node=1 -n2 -N1 --output=/dev/null -t1 --wrap $bin_hostname"]
subtest {[regexp "sbatch: error: Batch job submission failed: Requested node configuration is not available" $output]} "Job should be rejected at submit time"
if {[regexp "Submitted batch job ($number)" $output - job_id]} {
	lappend job_id_list $job_id
}

#
# Specify gpus-per-socket, but no sockets-per-node count
#
log_info "==== TEST 5 ===="
set output [run_command_output -xfail -subtest "$sbatch --gpus-per-socket=1 -N1 --output=/dev/null -t1 --wrap $bin_hostname"]
subtest {[regexp "sbatch: error: --gpus-per-socket option requires --sockets-per-node specification" $output]} "Job should be rejected at submit time"
if {[regexp "Submitted batch job ($number)" $output - job_id]} {
	lappend job_id_list $job_id
}

#
# Specify inconsistent tasks per node (variation of test 4)
#
log_info "==== TEST 6 ===="
set output [run_command_output -xfail -subtest "$sbatch --gpus-per-task=1 --gpus-per-node=2 --ntasks-per-node=1 -N1 --output=/dev/null -t1 --wrap $bin_hostname"]
if {$major < 21} {
	subtest {[regexp "sbatch: error: Batch job submission failed: Invalid generic resource \\(gres\\) specification" $output]} "Job should be rejected at submit time"
} else {
	subtest {[regexp "sbatch: error: Failed to validate job spec. Based on --gres=gpu and --gpus-per-task requested number of tasks per node differ from --ntasks-per-node." $output]} "Job should be rejected at submit time"
}
if {[regexp "Submitted batch job ($number)" $output - job_id]} {
	lappend job_id_list $job_id
}
